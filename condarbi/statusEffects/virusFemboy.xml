<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<statusEffect>
  <renderingPriority>75</renderingPriority>
  <renderInEffectsPanel>true</renderInEffectsPanel>
  <category>DEFAULT</category>
  <beneficial>NEUTRAL</beneficial>
  <combatEffect>false</combatEffect>
  <sexEffect>true</sexEffect>
  <tags/>
  <name><![CDATA[Femboy Virus]]></name>
  <description><![CDATA[
    [npc.HeSheHasFull()] the Femboy Virus and will quickly [npc.colorTfGeneric(transform into a femboy)] and [npc.glowTfGeneric(spread the virus to others through sexual contact.)]
  ]]></description>
  <imageName>virus.svg</imageName>
  <colourPrimary>BASE_BLUE_LIGHT</colourPrimary>
  <colourSecondary/>
  <colourTertiary/>
  <attributeModifiers/>
  <combatMoves/>
  <spells/>
  <extraEffects/>
  <applicationCondition><![CDATA[false]]></applicationCondition>
  <applicationLength constantRefresh="false">-1</applicationLength>
  <applyEffect><![CDATA[
    #IF(game.isInSex() && npc == sex.getCharacterOrgasming() && sex.isReadyToOrgasm(npc))
      [## function infect(partner) {
        partner.addStatusEffect(SE_condarbi_virusFemboy, 86400);
      }]
      [## function getPartners(characterMap) {
        characterMap.remove(npc);
        characterMap.keySet().forEach(infect);
      }]
      [##sex.getOngoingActionsMap(npc).values().stream().forEach(getPartners)]
    #ENDIF
  ]]></applyEffect>
  <applyRemovalEffect/>
  <applyPostRemovalEffect><![CDATA[
    [## npc.addStatusEffect(SE_condarbi_virusFemboy, 86400)]
    [## function transform(npc, area, stat, target, lowerBound, upperBound, desiredTime, onInfection) {
      var output = "";
      switch(area.toLowerCase()) {
        case 'attributes':
          switch(stat.toLowerCase().replace(/_/g, "")) {
            case 'corruption':
              var statObj = {
                get: function() {
                  return Math.round(npc.getAttributeValue(ATTRIBUTE_MAJOR_CORRUPTION));
                },
                set: function(i) {
                  output += npc.setAttribute(ATTRIBUTE_MAJOR_CORRUPTION, i);
                },
                increment: function(i) {
                  output += npc.incrementAttribute(ATTRIBUTE_MAJOR_CORRUPTION, i);
                },
                max: 100,
                min: 0
              };
              break;
          };
          break;
        case 'fetish':
          var statObj = {
            get: function() {
              if (npc.hasFetish(stat)) {
                return 5;
              } else {
                return npc.getFetishDesire(stat).getValue();
              }
            },
            set: function(i) {
              switch(i) {
                case 5:
                  npc.setFetishDesire(stat, FETISH_DESIRE_FOUR_LOVE);
                  output += npc.addFetish(stat, true);
                  break;
                case 4:
                  output += npc.setFetishDesire(stat, FETISH_DESIRE_FOUR_LOVE, true);
                  break;
                case 3:
                  output += npc.setFetishDesire(stat, FETISH_DESIRE_THREE_LIKE, true);
                  break;
                case 2:
                  output += npc.setFetishDesire(stat, FETISH_DESIRE_TWO_NEUTRAL, true);
                  break;
                case 1:
                  output += npc.setFetishDesire(stat, FETISH_DESIRE_ONE_DISLIKE, true);
                  break;
                case 0:
                  output += npc.setFetishDesire(stat, FETISH_DESIRE_ZERO_HATE, true);
                  break;
              }
            },
            increment: function(i) {
              this.set(this.get() + i);
            },
            max: 5,
            min: 0
          };
          break;
        case 'mouth':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'lipsize':
              var statObj = {
                get: function() {
                  return npc.getLipSizeValue();
                },
                set: function(i) {
                  output += npc.setLipSize(i);
                },
                increment: function(i) {
                  output += npc.incrementLipSize(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'capacity':
              var statObj = {
                get: function() {
                  return npc.getFaceRawCapacityValue();
                },
                set: function(i) {
                  output += npc.setFaceCapacity(i, false);
                },
                increment: function(i) {
                  output += npc.incrementFaceCapacity(i, false);
                },
                max: 25,
                min: 0
              };
              break;
            case 'depth':
              var statObj = {
                get: function() {
                  return npc.getFaceDepth().getValue();
                },
                set: function(i) {
                  output += npc.setFaceDepth(i);
                },
                increment: function(i) {
                  output += npc.incrementFaceDepth(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'elasticity':
              var statObj = {
                get: function() {
                  return npc.getFaceElasticity().getValue();
                },
                set: function(i) {
                  output += npc.setFaceElasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementFaceElasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'plasticity':
              var statObj = {
                get: function() {
                  return npc.getFacePlasticity().getValue();
                },
                set: function(i) {
                  output += npc.setFacePlasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementFacePlasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'wetness':
              var statObj = {
                get: function() {
                  return npc.getFaceWetness().getValue();
                },
                set: function(i) {
                  output += npc.setFaceWetness(i);
                },
                increment: function(i) {
                  output += npc.incrementFaceWetness(i);
                },
                max: 7,
                min: 0
              };
              break;
            default:
              var statObj = {
                get: function() {
                  return npc.hasFaceOrificeModifier(stat) ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.addFaceOrificeModifier(stat);
                  } else {
                    output += npc.removeFaceOrificeModifier(stat);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
          };
          break;
        case 'tongue':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'length':
              var statObj = {
                get: function() {
                  return npc.getTongueLengthValue();
                },
                set: function(i) {
                  output += npc.setTongueLength(i);
                },
                increment: function(i) {
                  output += npc.incrementTongueLength(i);
                },
                max: 60,
                min: 0
              };
              break;
            default:
              var statObj = {
                get: function() {
                  return npc.hasTongueModifier(stat) ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.addTongueModifier(stat);
                  } else {
                    output += npc.removeTongueModifier(stat);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
              break;
          };
          break;
        case 'core':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'heightnormal':
              var statObj = {
                get: function() {
                  if (!npc.isShortStature()) {
                    return npc.getHeightValue();
                  }
                },
                set: function(i) {
                  if (!npc.isShortStature()) {
                    output += npc.setHeight(i);
                  }
                },
                increment: function(i) {
                  if (!npc.isShortStature()) {
                    output += npc.incrementHeight(i, false);
                  }
                },
                max: 366,
                min: 122
              };
              break;
            case 'heightshort':
              var statObj = {
                get: function() {
                  if (npc.isShortStature()) {
                    return npc.getHeightValue();
                  }
                },
                set: function(i) {
                  if (npc.isShortStature()) {
                    output += npc.setHeight(i);
                  }
                },
                increment: function(i) {
                  if (npc.isShortStature()) {
                    output += npc.incrementHeight(i, false);
                  }
                },
                max: 122,
                min: 15
              };
              break;
            case 'musclesize':
              var statObj = {
                get: function() {
                  return npc.getMuscleValue();
                },
                set: function(i) {
                  output += npc.setMuscle(i);
                },
                increment: function(i) {
                  output += npc.incrementMuscle(i);
                },
                max: 100,
                min: 0
              };
              break;
            case 'bodysize':
              var statObj = {
                get: function() {
                  return npc.getBodySizeValue();
                },
                set: function(i) {
                  output += npc.setBodySize(i);
                },
                increment: function(i) {
                  output += npc.incrementBodySize(i);
                },
                max: 100,
                min: 0
              };
              break;
            case 'femininity':
              var statObj = {
                get: function() {
                  return npc.getFemininityValue();
                },
                set: function(i) {
                  output += npc.setFemininity(i);
                },
                increment: function(i) {
                  output += npc.incrementFemininity(i);
                },
                max: 100,
                min: 0
              };
              break;
          };
          break;
        case 'hair':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'head':
              var statObj = {
                get: function() {
                  return npc.getHairRawLengthValue();
                },
                set: function(i) {
                  output += npc.setHairLength(i);
                },
                increment: function(i) {
                  output += npc.incrementHairLength(i);
                },
                max: 350,
                min: 0
              };
              break;
            case 'facial':
              var statObj = {
                get: function() {
                  return npc.getFacialHair().getValue();
                },
                set: function(i) {
                  output += npc.setFacialHair(i);
                },
                increment: function(i) {
                  output += npc.incrementFacialHair(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'pubic':
              var statObj = {
                get: function() {
                  return npc.getPubicHair().getValue();
                },
                set: function(i) {
                  output += npc.setPubicHair(i);
                },
                increment: function(i) {
                  output += npc.incrementPubicHair(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'arm':
              var statObj = {
                get: function() {
                  return npc.getUnderarmHair().getValue();
                },
                set: function(i) {
                  output += npc.setUnderarmHair(i);
                },
                increment: function(i) {
                  output += npc.incrementUnderarmHair(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'ass':
              var statObj = {
                get: function() {
                  return npc.getAssHair().getValue();
                },
                set: function(i) {
                  output += npc.setAssHair(i);
                },
                increment: function(i) {
                  output += npc.incrementAssHair(i);
                },
                max: 7,
                min: 0
              };
              break;
          };
          break;
        case 'ass':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'asssize':
              var statObj = {
                get: function() {
                  return npc.getAssSize().getValue();
                },
                set: function(i) {
                  output += npc.setAssSize(i);
                },
                increment: function(i) {
                  output += npc.incrementAssSize(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'hipsize':
              var statObj = {
                get: function() {
                  return npc.getHipSize().getValue();
                },
                set: function(i) {
                  output += npc.setHipSize(i);
                },
                increment: function(i) {
                  output += npc.incrementHipSize(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'capacity':
              var statObj = {
                get: function() {
                  return npc.getAssRawCapacityValue();
                },
                set: function(i) {
                  output += npc.setAssCapacity(i, false);
                },
                increment: function(i) {
                  output += npc.incrementAssCapacity(i, false);
                },
                max: 25,
                min: 0
              };
              break;
            case 'depth':
              var statObj = {
                get: function() {
                  return npc.getAssDepth().getValue();
                },
                set: function(i) {
                  output += npc.setAssDepth(i);
                },
                increment: function(i) {
                  output += npc.incrementAssDepth(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'elasticity':
              var statObj = {
                get: function() {
                  return npc.getAssElasticity().getValue();
                },
                set: function(i) {
                  output += npc.setAssElasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementAssElasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'plasticity':
              var statObj = {
                get: function() {
                  return npc.getAssPlasticity().getValue();
                },
                set: function(i) {
                  output += npc.setAssPlasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementAssPlasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'wetness':
              var statObj = {
                get: function() {
                  return npc.getAssWetness().getValue();
                },
                set: function(i) {
                  output += npc.setAssWetness(i);
                },
                increment: function(i) {
                  output += npc.incrementAssWetness(i);
                },
                max: 7,
                min: 0
              };
              break;
            default:
              var statObj = {
                get: function() {
                  return npc.hasAssOrificeModifier(stat) ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.addAssOrificeModifier(stat);
                  } else {
                    output += npc.removeAssOrificeModifier(stat);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
          };
          break;
        case 'breasts':
        case 'breast':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'size':
              var statObj = {
                get: function() {
                  return npc.getBreastRawSizeValue();
                },
                set: function(i) {
                  output += npc.setBreastSize(i);
                },
                increment: function(i) {
                  output += npc.incrementBreastSize(i);
                },
                max: 91,
                min: 0
              };
              break;
            case 'nipplesize':
              var statObj = {
                get: function() {
                  return npc.getNippleSize().getValue();
                },
                set: function(i) {
                  output += npc.setNippleSize(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleSize(i);
                },
                max: 4,
                min: 0
              };
              break;
            case 'areolaesize':
              var statObj = {
                get: function() {
                  return npc.getAreolaeSize().getValue();
                },
                set: function(i) {
                  output += npc.setAreolaeSize(i);
                },
                increment: function(i) {
                  output += npc.incrementAreolaeSize(i);
                },
                max: 4,
                min: 0
              };
              break;
            case 'capacity':
              var statObj = {
                get: function() {
                  return npc.getNippleRawCapacityValue();
                },
                set: function(i) {
                  output += npc.setNippleCapacity(i, false);
                },
                increment: function(i) {
                  output += npc.incrementNippleCapacity(i, false);
                },
                max: 25,
                min: 0
              };
              break;
            case 'depth':
              var statObj = {
                get: function() {
                  return npc.getNippleDepth().getValue();
                },
                set: function(i) {
                  output += npc.setNippleDepth(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleDepth(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'elasticity':
              var statObj = {
                get: function() {
                  return npc.getNippleElasticity().getValue();
                },
                set: function(i) {
                  output += npc.setNippleElasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleElasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'plasticity':
              var statObj = {
                get: function() {
                  return npc.getNipplePlasticity().getValue();
                },
                set: function(i) {
                  output += npc.setNipplePlasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementNipplePlasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            default:
              var statObj = {
                get: function() {
                  return npc.hasNippleOrificeModifier(stat) ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.addNippleOrificeModifier(stat);
                  } else {
                    output += npc.removeNippleOrificeModifier(stat);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
          };
          break;
        case 'breastscrotch':
        case 'breastcrotch':
        case 'crotchbreast':
        case 'crotchbreasts':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'size':
              var statObj = {
                get: function() {
                  return npc.getBreastCrotchRawSizeValue();
                },
                set: function(i) {
                  output += npc.setBreastCrotchSize(i);
                },
                increment: function(i) {
                  output += npc.incrementBreastCrotchSize(i);
                },
                max: 91,
                min: 0
              };
              break;
            case 'nipplesize':
              var statObj = {
                get: function() {
                  return npc.getNippleCrotchSize().getValue();
                },
                set: function(i) {
                  output += npc.setNippleCrotchSize(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleCrotchSize(i);
                },
                max: 4,
                min: 0
              };
              break;
            case 'areolaesize':
              var statObj = {
                get: function() {
                  return npc.getAreolaeCrotchSize().getValue();
                },
                set: function(i) {
                  output += npc.setAreolaeCrotchSize(i);
                },
                increment: function(i) {
                  output += npc.incrementAreolaeCrotchSize(i);
                },
                max: 4,
                min: 0
              };
              break;
            case 'capacity':
              var statObj = {
                get: function() {
                  return npc.getNippleCrotchRawCapacityValue();
                },
                set: function(i) {
                  output += npc.setNippleCrotchCapacity(i, false);
                },
                increment: function(i) {
                  output += npc.incrementNippleCrotchCapacity(i, false);
                },
                max: 25,
                min: 0
              };
              break;
            case 'depth':
              var statObj = {
                get: function() {
                  return npc.getNippleCrotchDepth().getValue();
                },
                set: function(i) {
                  output += npc.setNippleCrotchDepth(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleCrotchDepth(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'elasticity':
              var statObj = {
                get: function() {
                  return npc.getNippleCrotchElasticity().getValue();
                },
                set: function(i) {
                  output += npc.setNippleCrotchElasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleCrotchElasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'plasticity':
              var statObj = {
                get: function() {
                  return npc.getNippleCrotchPlasticity().getValue();
                },
                set: function(i) {
                  output += npc.setNippleCrotchPlasticity(i);
                },
                increment: function(i) {
                  output += npc.incrementNippleCrotchPlasticity(i);
                },
                max: 7,
                min: 0
              };
              break;
            default:
              var statObj = {
                get: function() {
                  return npc.hasNippleCrotchOrificeModifier(stat) ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.addNippleCrotchOrificeModifier(stat);
                  } else {
                    output += npc.removeNippleCrotchOrificeModifier(stat);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
          };
          break;
        case 'dick':
        case 'penis':
          switch(stat.toString().toLowerCase().replace(/_/g, "")) {
            case 'has':
            case 'exists':
              var statObj = {
                get: function() {
                  return npc.hasPenisIgnoreDildo() ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.setPenisType(npc.getFleshSubspecies().getRace().getRacialBody().getPenisType());
                  } else {
                    output += npc.setPenisType(PENIS_TYPE_NONE);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
              break;
            case 'length':
            case 'size':
              var statObj = {
                get: function() {
                  return npc.getPenisRawSizeValue();
                },
                set: function(i) {
                  output += npc.setPenisSize(i);
                },
                increment: function(i) {
                  output += npc.incrementPenisSize(i);
                },
                max: 100,
                min: 0
              };
              break;
            case 'girth':
              var statObj = {
                get: function() {
                  return npc.getPenisRawGirthValue();
                },
                set: function(i) {
                  output += npc.setPenisGirth(i);
                },
                increment: function(i) {
                  output += npc.incrementPenisGirth(i);
                },
                max: 7,
                min: 0
              };
              break;
            case 'ballsize':
            case 'ballssize':
            case 'testiclesize':
            case 'testiclessize':
              var statObj = {
                get: function() {
                  return npc.getTesticleSize().getValue();
                },
                set: function(i) {
                  output += npc.setTesticleSize(i);
                },
                increment: function(i) {
                  output += npc.incrementTesticleSize(i);
                },
                max: 7,
                min: 0
              };
              break;
            default:
              var statObj = {
                get: function() {
                  return npc.hasPenisModifier(stat) ? 1 : 0;
                },
                set: function(i) {
                  if (i > 0) {
                    output += npc.addPenisModifier(stat);
                  } else {
                    output += npc.removePenisModifier(stat);
                  }
                },
                increment: function(i) {
                  this.set(i + this.get());
                },
                max: 1,
                min: 0
              };
          };
          break;
      }
      statObj.increment(1);
      return output;
    }]
    [# transform(npc, "mouth", ORIFICE_MODIFIER_RIBBED, 1, 2, 3, 4, 5)]
    [# transform(npc, "ass", "assSize", 1, 2, 3, 4, 5)]
    [# transform(npc, "breast", "Size", 1, 2, 3, 4, 5)]
    [# transform(npc, "attributes", "corruption", 1, 2, 3, 4, 5)]
    [# transform(npc, "fetish", FETISH_ANAL_GIVING, 1, 2, 3, 4, 5)]
  ]]></applyPostRemovalEffect>
</statusEffect>
